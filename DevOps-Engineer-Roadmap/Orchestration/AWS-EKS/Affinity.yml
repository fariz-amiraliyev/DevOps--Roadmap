Affinity and anti-affinity


Affinity and anti-affinity
nodeSelector provides a very simple way to constrain pods to nodes with particular labels.
The affinity/anti-affinity feature, currently in beta, greatly extends the types of constraints you can express. The key enhancements are:

The language is more expressive (not just “AND of exact match”)
You can indicate that the rule is “soft”/“preference” rather than a hard requirement,
so if the scheduler can’t satisfy it, the pod will still be scheduled
You can constrain against labels on other pods running on the node (or other topological domain),
rather than against labels on the node itself, which allows rules about which pods can and cannot be co-located


kubectl label nodes ip-192-168-15-64.us-west-2.compute.internal azname=az1


apiVersion: v1
kind: Pod
metadata:
  name: nginx
  labels:
    env: test
spec:
  containers:
  - name: nginx
    image: nginx
    imagePullPolicy: IfNotPresent
  nodeSelector:
    disktype: ssd

    Node affinity
Node affinity is conceptually similar to nodeSelector -- it allows you to
constrain which nodes your pod is eligible to be scheduled on, based on labels on the node.

There are currently two types of node affinity, called requiredDuringSchedulingIgnoredDuringExecution
and preferredDuringSchedulingIgnoredDuringExecution.

apiVersion: v1
kind: Pod
metadata:
  name: with-node-affinity
spec:
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: kubernetes.io/e2e-az-name
            operator: In
            values:
            - e2e-az1
            - e2e-az2
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 1
        preference:
          matchExpressions:
          - key: another-node-label-key
            operator: In
            values:
            - another-node-label-value
  containers:
  - name: with-node-affinity
    image: k8s.gcr.io/pause:2.0
