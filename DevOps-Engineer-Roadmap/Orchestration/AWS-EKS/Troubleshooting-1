I want to share a root-cause analysis I did for the slodev incident.
It seems, staging vault keys where copied and populated to the slodev vault "as is".
Some of these services interact with AWS resources and have AWS credentials in them, resulting in the
slo dev services affecting staging AWS resources for that service e.g. SQS, SNS, S3.
This is the list of services using AWS credentials:

boarding-service
pl-boarding-service
analyze-api
lsp-producer
application-info
loanpro-reporting
apem
node-loantapes
slo-service
lendingqb-gateway.aws
accredited-school-service
partner
audit
navient-servicing-data-provider
feed-ingestor.aws
loan-service
slo-certification-service
credit-report-review.aws
partner-api
cda-service
agiloft-producer
sst-servicing-data-ingestion.aws


as a short term solution, we can generate and update the AWS credentials and AWS resources references for these services.
as a longer term solution, we should try to move to use roles instead of long-lived aws credentials, this can be done with kube2iam.


this is the script used to find the services with aws secrets:


find_secrets_with_aws.py
from dataclasses import dataclass
import re
from typing import List
import yaml
from subprocess import run
import glob
​
​
@dataclass
class ServiceSecrets:
    name: str
    path: str
    keys: List[str]
​
    @property
    def has_aws_credentials(self):
        return "AWS_ACCESS_KEY_ID" in self.keys
​
    @staticmethod
    def name_from_path(path):
        match = re.search(r".*/(.*).yml", path)
        return match.group(1)
​
    @staticmethod
    def build_service_secret(**kargs):
        return ServiceSecrets(
            name=ServiceSecrets.name_from_path(kargs["path"]), **kargs
        )
​
​
def get_secrets_keys(result):
    secrets_dict = yaml.safe_load(result.stdout)
    return secrets_dict.keys()
​
​
def load_secrets(files):
    secrets_res = []
    for file_path in files:
        result = run(
            f"ansible-vault decrypt --output - {file_path}".split(), capture_output=True
        )
        ks = get_secrets_keys(result)
        secrets_res.append(ServiceSecrets.build_service_secret(path=file_path, keys=ks))
    return secrets_res
​
​
files = glob.glob("roles/vault-populate/files/slo-dev/secret/*.yml")
secrets_res = load_secrets(files)
secrets_with_aws_credentials = filter(lambda x: x.has_aws_credentials, secrets_res)
for secret in secrets_with_aws_credentials:
    print(secret.name)
    # print(secret)
