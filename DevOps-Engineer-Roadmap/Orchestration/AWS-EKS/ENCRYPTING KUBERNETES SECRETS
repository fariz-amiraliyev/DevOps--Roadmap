1. How to store sensitive data in Kubernetes ?
2. Kubernetes can store secrets that pods can access via a mounted volume.
3. How integrate Kube secrets with AWS KMS ?
4. Kubernetes secrets allow you to store and manage sensitive information,
   such as passwords, docker registry credentials, and TLS keys using the Kubernetes
   API. Kubernetes stores all secret object data within etcd and all etcd volumes
   used by Amazon EKS are encrypted at the disk-level using AWS-managed encryption keys.

5. Now you can further encrypt Kubernetes secrets with KMS keys that you create or
   import keys generated from another system to AWS KMS and use them with the cluster,
  without needing to install or manage additional software.

6.Envelope encryption for secrets is available for new Amazon EKS clusters running
  Kubernetes version 1.13 and above. You can setup your own Customer Master Key (CMK)
  in KMS and link this key by providing the CMK ARN when you create an EKS cluster.
  When secrets are stored using the Kubernetes secrets API, they are encrypted with a
  Kubernetes-generated data encryption key, which is then further encrypted using
  the linked AWS KMS key.

7. How to manage the deployment of sensitive information to their Kubernetes clusters,
   and to store them securely in a Git repository and to integrate them into
   their continuous delivery pipelines.

8. What is envelope encryption ?

9. Secrtes inside EKS >> Data Encryption by EKS API >>> KMS encrypt DEK. 



The workflow is as follows:
The user (typically in an admin role) creates a secret.
The Kubernetes API server in the EKS control plane generates a Data Encryption Key (DEK)
 locally and uses it to encrypt the plaintext payload in the secret. Note that the control
 plane generates a unique DEK for every single write, and the plaintext DEK is never saved to disk.
The Kubernetes API server calls kms:Encrypt to encrypt the DEK with the CMK. This key is the
root of the key hierarchy, and, in the case of KMS, it creates the CMK on a hardware security
module (HSM). In this step, the API server uses the CMK to encrypt the DEK and also caches
the base64 of the encrypted DEK.
The API server stores the DEK-encrypted secret in etcd.
If one now wants to use the secret in, say a pod via a volume (read-path), the reverse process
takes place. That is, the API server reads the encrypted secret from etcd and decrypts
the secret with the DEK.
The application, running in a pod on either EC2 or Fargate, can then consume
the secret as usual.
