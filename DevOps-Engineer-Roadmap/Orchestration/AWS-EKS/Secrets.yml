A secret is a resource that helps cluster operators manage the deployment of
sensitive information, such as passwords, OAuth tokens, and SSH keys.

These secrets can be mounted as data volumes or exposed as environment variables
to the containers in a Kubernetes Pod, thus decoupling Pod deployment from managing
sensitive data needed by the containerized applications within a Pod.

Exposing Secrets as Environment Variables:

apiVersion: v1
kind: Pod
metadata:
  name: someName
  namespace: someNamespace
spec:
  containers:
  - name: someContainer
    image: someImage
    env:
    - name: DATABASE_USER
      valueFrom:
        secretKeyRef:
          name: database-credentials
          key: username
    - name: DATABASE_PASSWORD
      valueFrom:
        secretKeyRef:
          name: database-credentials
          key: password

          to create pod:
wget https://eksworkshop.com/beginner/200_secrets/secrets.files/pod-variable.yaml
kubectl apply -f pod-variable.yaml
kubectl get pod -n octank

kubectl logs pod-variable -n octank



Exposing Secrets as Volumes:
Secrets can be also mounted as data volumes on to a Pod and you can control
the paths within the volume where the Secret keys are projected using a
Pod manifest as shown below:


apiVersion: v1
kind: Pod
metadata:
  name: someName
  namespace: someNamespace
spec:
  containers:
  - name: someContainer
    image: someImage
    volumeMounts:
    - name: secret-volume
      mountPath: "/etc/data"
      readOnly: true
  volumes:
  - name: secret-volume
    secret:
      secretName: database-credentials
      items:
      - key: username
        path: DATABASE_USER
      - key: password
        path: DATABASE_PASSWORD



SEALED SECRETS FOR KUBERNETES:

Sealed Secrets is composed of two parts: - A cluster-side controller - A client-side utility called kubeseal.
The companion CLI tool kubeseal is used for creating a SealedSecret custom resource definition (CRD)
from a Secret resource definition using the public key. kubeseal can communicate with the controller
through the Kubernetes API server and retrieve the public key needed for encrypting a Secret at run-time.
The public key may also be downloaded from the controller and saved locally to be used offline.

wget https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.10.0/kubeseal-linux-amd64 -O kubeseal
sudo install -m 755 kubeseal /usr/local/bin/kubeseal

brew install kubeseal

https://github.com/bitnami-labs/sealed-secrets
